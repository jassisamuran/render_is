{"ast":null,"code":"// Generated by CoffeeScript 1.12.7\n(function () {\n  var LineMap, SourceMap;\n  LineMap = function () {\n    function LineMap(line1) {\n      this.line = line1;\n      this.columns = [];\n    }\n    LineMap.prototype.add = function (column, arg, options) {\n      var sourceColumn, sourceLine;\n      sourceLine = arg[0], sourceColumn = arg[1];\n      if (options == null) {\n        options = {};\n      }\n      if (this.columns[column] && options.noReplace) {\n        return;\n      }\n      return this.columns[column] = {\n        line: this.line,\n        column: column,\n        sourceLine: sourceLine,\n        sourceColumn: sourceColumn\n      };\n    };\n    LineMap.prototype.sourceLocation = function (column) {\n      var mapping;\n      while (!((mapping = this.columns[column]) || column <= 0)) {\n        column--;\n      }\n      return mapping && [mapping.sourceLine, mapping.sourceColumn];\n    };\n    return LineMap;\n  }();\n  SourceMap = function () {\n    var BASE64_CHARS, VLQ_CONTINUATION_BIT, VLQ_SHIFT, VLQ_VALUE_MASK;\n    function SourceMap() {\n      this.lines = [];\n    }\n    SourceMap.prototype.add = function (sourceLocation, generatedLocation, options) {\n      var base, column, line, lineMap;\n      if (options == null) {\n        options = {};\n      }\n      line = generatedLocation[0], column = generatedLocation[1];\n      lineMap = (base = this.lines)[line] || (base[line] = new LineMap(line));\n      return lineMap.add(column, sourceLocation, options);\n    };\n    SourceMap.prototype.sourceLocation = function (arg) {\n      var column, line, lineMap;\n      line = arg[0], column = arg[1];\n      while (!((lineMap = this.lines[line]) || line <= 0)) {\n        line--;\n      }\n      return lineMap && lineMap.sourceLocation(column);\n    };\n    SourceMap.prototype.generate = function (options, code) {\n      var buffer, i, j, lastColumn, lastSourceColumn, lastSourceLine, len, len1, lineMap, lineNumber, mapping, needComma, ref, ref1, v3, writingline;\n      if (options == null) {\n        options = {};\n      }\n      if (code == null) {\n        code = null;\n      }\n      writingline = 0;\n      lastColumn = 0;\n      lastSourceLine = 0;\n      lastSourceColumn = 0;\n      needComma = false;\n      buffer = \"\";\n      ref = this.lines;\n      for (lineNumber = i = 0, len = ref.length; i < len; lineNumber = ++i) {\n        lineMap = ref[lineNumber];\n        if (lineMap) {\n          ref1 = lineMap.columns;\n          for (j = 0, len1 = ref1.length; j < len1; j++) {\n            mapping = ref1[j];\n            if (!mapping) {\n              continue;\n            }\n            while (writingline < mapping.line) {\n              lastColumn = 0;\n              needComma = false;\n              buffer += \";\";\n              writingline++;\n            }\n            if (needComma) {\n              buffer += \",\";\n              needComma = false;\n            }\n            buffer += this.encodeVlq(mapping.column - lastColumn);\n            lastColumn = mapping.column;\n            buffer += this.encodeVlq(0);\n            buffer += this.encodeVlq(mapping.sourceLine - lastSourceLine);\n            lastSourceLine = mapping.sourceLine;\n            buffer += this.encodeVlq(mapping.sourceColumn - lastSourceColumn);\n            lastSourceColumn = mapping.sourceColumn;\n            needComma = true;\n          }\n        }\n      }\n      v3 = {\n        version: 3,\n        file: options.generatedFile || '',\n        sourceRoot: options.sourceRoot || '',\n        sources: options.sourceFiles || [''],\n        names: [],\n        mappings: buffer\n      };\n      if (options.inlineMap) {\n        v3.sourcesContent = [code];\n      }\n      return v3;\n    };\n    VLQ_SHIFT = 5;\n    VLQ_CONTINUATION_BIT = 1 << VLQ_SHIFT;\n    VLQ_VALUE_MASK = VLQ_CONTINUATION_BIT - 1;\n    SourceMap.prototype.encodeVlq = function (value) {\n      var answer, nextChunk, signBit, valueToEncode;\n      answer = '';\n      signBit = value < 0 ? 1 : 0;\n      valueToEncode = (Math.abs(value) << 1) + signBit;\n      while (valueToEncode || !answer) {\n        nextChunk = valueToEncode & VLQ_VALUE_MASK;\n        valueToEncode = valueToEncode >> VLQ_SHIFT;\n        if (valueToEncode) {\n          nextChunk |= VLQ_CONTINUATION_BIT;\n        }\n        answer += this.encodeBase64(nextChunk);\n      }\n      return answer;\n    };\n    BASE64_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    SourceMap.prototype.encodeBase64 = function (value) {\n      return BASE64_CHARS[value] || function () {\n        throw new Error(\"Cannot Base64 encode value: \" + value);\n      }();\n    };\n    return SourceMap;\n  }();\n  module.exports = SourceMap;\n}).call(this);","map":{"version":3,"names":["LineMap","SourceMap","line1","line","columns","prototype","add","column","arg","options","sourceColumn","sourceLine","noReplace","sourceLocation","mapping","BASE64_CHARS","VLQ_CONTINUATION_BIT","VLQ_SHIFT","VLQ_VALUE_MASK","lines","generatedLocation","base","lineMap","generate","code","buffer","i","j","lastColumn","lastSourceColumn","lastSourceLine","len","len1","lineNumber","needComma","ref","ref1","v3","writingline","length","encodeVlq","version","file","generatedFile","sourceRoot","sources","sourceFiles","names","mappings","inlineMap","sourcesContent","value","answer","nextChunk","signBit","valueToEncode","Math","abs","encodeBase64","Error","module","exports","call"],"sources":["/home/kali/Desktop/c++/proshop/node_modules/coffee-script/lib/coffee-script/sourcemap.js"],"sourcesContent":["// Generated by CoffeeScript 1.12.7\n(function() {\n  var LineMap, SourceMap;\n\n  LineMap = (function() {\n    function LineMap(line1) {\n      this.line = line1;\n      this.columns = [];\n    }\n\n    LineMap.prototype.add = function(column, arg, options) {\n      var sourceColumn, sourceLine;\n      sourceLine = arg[0], sourceColumn = arg[1];\n      if (options == null) {\n        options = {};\n      }\n      if (this.columns[column] && options.noReplace) {\n        return;\n      }\n      return this.columns[column] = {\n        line: this.line,\n        column: column,\n        sourceLine: sourceLine,\n        sourceColumn: sourceColumn\n      };\n    };\n\n    LineMap.prototype.sourceLocation = function(column) {\n      var mapping;\n      while (!((mapping = this.columns[column]) || (column <= 0))) {\n        column--;\n      }\n      return mapping && [mapping.sourceLine, mapping.sourceColumn];\n    };\n\n    return LineMap;\n\n  })();\n\n  SourceMap = (function() {\n    var BASE64_CHARS, VLQ_CONTINUATION_BIT, VLQ_SHIFT, VLQ_VALUE_MASK;\n\n    function SourceMap() {\n      this.lines = [];\n    }\n\n    SourceMap.prototype.add = function(sourceLocation, generatedLocation, options) {\n      var base, column, line, lineMap;\n      if (options == null) {\n        options = {};\n      }\n      line = generatedLocation[0], column = generatedLocation[1];\n      lineMap = ((base = this.lines)[line] || (base[line] = new LineMap(line)));\n      return lineMap.add(column, sourceLocation, options);\n    };\n\n    SourceMap.prototype.sourceLocation = function(arg) {\n      var column, line, lineMap;\n      line = arg[0], column = arg[1];\n      while (!((lineMap = this.lines[line]) || (line <= 0))) {\n        line--;\n      }\n      return lineMap && lineMap.sourceLocation(column);\n    };\n\n    SourceMap.prototype.generate = function(options, code) {\n      var buffer, i, j, lastColumn, lastSourceColumn, lastSourceLine, len, len1, lineMap, lineNumber, mapping, needComma, ref, ref1, v3, writingline;\n      if (options == null) {\n        options = {};\n      }\n      if (code == null) {\n        code = null;\n      }\n      writingline = 0;\n      lastColumn = 0;\n      lastSourceLine = 0;\n      lastSourceColumn = 0;\n      needComma = false;\n      buffer = \"\";\n      ref = this.lines;\n      for (lineNumber = i = 0, len = ref.length; i < len; lineNumber = ++i) {\n        lineMap = ref[lineNumber];\n        if (lineMap) {\n          ref1 = lineMap.columns;\n          for (j = 0, len1 = ref1.length; j < len1; j++) {\n            mapping = ref1[j];\n            if (!(mapping)) {\n              continue;\n            }\n            while (writingline < mapping.line) {\n              lastColumn = 0;\n              needComma = false;\n              buffer += \";\";\n              writingline++;\n            }\n            if (needComma) {\n              buffer += \",\";\n              needComma = false;\n            }\n            buffer += this.encodeVlq(mapping.column - lastColumn);\n            lastColumn = mapping.column;\n            buffer += this.encodeVlq(0);\n            buffer += this.encodeVlq(mapping.sourceLine - lastSourceLine);\n            lastSourceLine = mapping.sourceLine;\n            buffer += this.encodeVlq(mapping.sourceColumn - lastSourceColumn);\n            lastSourceColumn = mapping.sourceColumn;\n            needComma = true;\n          }\n        }\n      }\n      v3 = {\n        version: 3,\n        file: options.generatedFile || '',\n        sourceRoot: options.sourceRoot || '',\n        sources: options.sourceFiles || [''],\n        names: [],\n        mappings: buffer\n      };\n      if (options.inlineMap) {\n        v3.sourcesContent = [code];\n      }\n      return v3;\n    };\n\n    VLQ_SHIFT = 5;\n\n    VLQ_CONTINUATION_BIT = 1 << VLQ_SHIFT;\n\n    VLQ_VALUE_MASK = VLQ_CONTINUATION_BIT - 1;\n\n    SourceMap.prototype.encodeVlq = function(value) {\n      var answer, nextChunk, signBit, valueToEncode;\n      answer = '';\n      signBit = value < 0 ? 1 : 0;\n      valueToEncode = (Math.abs(value) << 1) + signBit;\n      while (valueToEncode || !answer) {\n        nextChunk = valueToEncode & VLQ_VALUE_MASK;\n        valueToEncode = valueToEncode >> VLQ_SHIFT;\n        if (valueToEncode) {\n          nextChunk |= VLQ_CONTINUATION_BIT;\n        }\n        answer += this.encodeBase64(nextChunk);\n      }\n      return answer;\n    };\n\n    BASE64_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n    SourceMap.prototype.encodeBase64 = function(value) {\n      return BASE64_CHARS[value] || (function() {\n        throw new Error(\"Cannot Base64 encode value: \" + value);\n      })();\n    };\n\n    return SourceMap;\n\n  })();\n\n  module.exports = SourceMap;\n\n}).call(this);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}